description
'連想配列'（れんそうはいれつ、）とは、コンピュータプログラミングにおいて、添え字にスカラー数値以外のデータ型(文字列型等)も使用できる配列である。抽象データ型のひとつ。'連想リスト'、'連想コンテナ'、'辞書'（あるいはカタカナで'ディクショナリ' ）、'ハッシュ'（）、'マップ'（）とも呼ばれる。

歴史的には、最初に  の連想リストとして広く認知された。その後、 で table として、 で連想配列として実装したことで、その潜在能力がさらに広く知られるようになった。現在、 など一部の言語では、添え字にはどのようなデータでも使えるものもある。

== データ構造 ==
連想配列の実装に使われるデータ構造としては、主に平衡2分探索木（赤黒木やAVL木など）やハッシュテーブルがある。ほかにはB木や連想リスト、トライ木、基数木などが利用されることもある。純粋な連想配列においてはキーの重複があってはならない。マップ（連想配列）を拡張したマルチマップはキーが重複したデータも上書きせずに保持できるデータ構造である。

連想配列を一般化したデータ構造のひとつに'マルチマップ'（）があり、一つのキーに対して複数の値を格納することができる, pp. 389–397.。また別の一般化である'双方向マップ'(、、)はバインディング操作を双方向で行う（キーと値に全単射関係をもたせる）データコンテナである。双方向マップの値それぞれが重複のないキーに関連付けられなければならない。キーを引数に取る通常の連想配列におけるlookup操作の他に値を引数にとるlookup操作が追加され、この操作は引数として与えられた値に関連付けられたキーを検索する。

== よく用意される命令 ==
純粋な連想配列でのキー-値間の参照をバインディング（またはバインドとも）と呼ぶ。「バインディング」という語は新たな参照を作る過程に対しても用いられる。

しばしば定義される操作は以下のようなものが挙げられる:..

*'Add' or 'insert'（追加）: 新しい(key, value)の対をコレクションに追加し、キーと値の間への新たな参照を追加する。この操作の引数はキーとそれに関連付けられる値である。
* 'Reassign' or 'replace'（置換）: 既存の(key, value)対の値を書き換え、キーからの古い参照を新たな値への参照に置き換える。引数はinsertを行った時のキーと新たな値である。
* 'Remove' or 'delete'（削除）: (key, value)対をコレクションから削除し、キーから値への参照を消去する。引数はコレクションから削除するキーのみ。
* 'Lookup' or 'get'（検索）: キーに束縛されている値を取り出す。引数はキーであり、キー束縛された値が戻り値となる。もし値が見つからなければ連想配列の実装の一部では例外をスローする。

また、連想配列はここで上げた以外の操作も含む。それは例えばキーの関連付けの数を特定したりすべてのキーを調べるためのイテレータを作成したりといったものである。このイテレータによって得られる参照の順序はしばしば不定となる。

== 連想配列を標準で提供する主な言語 ==
* 
*  &mdash; 標準ライブラリのクラス std::map として提供されている。これはハッシュではなく二分木により実装されている。ハッシュを使いた std::unordered_map も提供される。
* D言語
*  () - すべてのオブジェクトが、文字列が添え字の連想配列として扱われる。MapとWeakMap型だと添え字を任意のオブジェクトにすることができる。
* Go &mdash; map[keytype]valtype 型
* 
*  &mdash; 標準パッケージの, , , ,  で提供。その他  などでも提供。
*  &mdash; キーとデータで構成された cons セルcar, cdrと呼ばれる二つデータが組になった、2-タプルのデータ構造のリストを連想配列として（car部をキーにcdr部をデータ、またはその逆）として使う関数（assoc, rassoc）が提供されている。
* 
*  - System.Collections.Hashtable, System.Collections.Specialized.ListDictionary, System.Collections.Specialized.HybridDictionary, System.Collections.Generic.Dictionaryにて提供。(ただし Dictionary は CLR 2.0 以降) 
*  &mdash; 結合配列 (Oracle Database 9i 以降)
* PHP - 配列と連想配列の区別がない
*  &mdash; 「辞書型 (dictionary)」という名前で呼ばれる
*  &mdash; %ではじまる変数が連想配列。要素には$hash{$key}としてアクセスする(通常の配列は@で宣言し、要素へは$array[$index]としてアクセス)。同言語で連想配列を(その実装から)「ハッシュ」と呼び始めたことから、「ハッシュ」が連想配列の別名として定着した。
* 
*  &mdash; 組み込みのクラス Hash で提供
* 
* 
* 
* 
* 

== 脚注 ==


== 関連項目 ==
* ルックアップテーブル
* メモ化




Category:データ型
