description<br />
&#39;<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>&#39;（むげんループ、）は、コンピュータ・プログラムの一連の命令が無限に繰り返される（ループする）ことである。&#39;永久ループ&#39;（えいきゅうループ）ともいう。<br />
<br />
専門用語としては一応きちんとした意味があるが、刺激的に感じられる他の用語（例えばメモリリーク）と同様に、通俗的な使い方もされる（「日常会話での使用」を参照）。専門的な意味としての<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>は、通常プログラマが原因を突き止めることができる、と簡単に考える者もいるようだが、実際のところそうではないこともある（#<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>の検出）。<br />
<br />
== ループ ==<br />
そもそもループとは、特定の条件が満たされるまで一連の命令を繰り返すことである。あるループに内在する特性により、条件が決して満たされない時に<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>が発生する。こうした挙動が必要とされる状況もわずかに存在する。例えば、インターネットや<a href="http://localhost/keyword/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9">データベース</a>などのサーバプログラムの多くは「リクエストを待ってサービスする」ことをいつまでも繰り返しているが、これは厳密には<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>とは見なされない。ループの脱出条件として手動でプログラムを終了させることができるからである。ほとんどの場合、「<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>」という言葉は意図した結果ではない状況を指して使われる。つまりバグである。そういったミスは初級のプログラマでよく見られるが、経験豊富なプログラマでも間違いを犯すことはあり、その原因はかなり微妙で難解なことがある。<br />
<br />
但し、慣用的な用法としては、ループの先頭部分でも終端部分でもない手続きの中途半端な部分でループから抜け出す必要があり、抜け出す条件が入り組んでいる、といったような場合に使うような、ループ自体は<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>風に書いておき（たとえばC言語なら「for (;;) { ... }」と書くのがイディオムである）、途中脱出機能を使って脱出する（C言語なら break 文）というような場合を指しても「<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>の形」のように言ったりもする。<br />
<br />
BASICでの簡単な例：<br />
<br />
<br />
 10 x = x + 1<br />
 20 Print x<br />
 30 GoTo 10<br />
<br />
ここでのループは明らかで、最終行の実行後、無条件に先頭行が実行される。終了条件を評価する時の予想外の挙動でも、この問題は発生する。以下は、C言語での例である：<br />
<br />
<br />
float x = 0.1;<br />
while (x != 1.1) {<br />
    printf(&#34;x = %f\<br />
&#34;, x);<br />
    x = x + 0.1;<br />
}<br />
<br />
<br />
このループは、期待通りに10回実行されるシステムもあるかもしれないが、終了しないシステムもあるかもしれない。ここでの問題は、ループの終了条件 (x != 1.1) が2つの浮動小数点数の厳密な一致をテストしていることである。多くのコンピュータの（2進の）浮動小数点の計算では 0.1 という値は正確に表現できないため、それを11回足した値がリテラルの 1.1 の値と厳密に一致するとは限らない。<br />
<br />
浮動小数点値を使う時には、等式でテストを行うと予想外に失敗する可能性があるため、不等式でテストすると安全である。例えば x が 1.1 と等しいかどうかをテストする代わりに (x  や (x  でテストする。そのどちらでも、有限回数の繰り返しで脱出できる。しかし、実行回数が不確実であることに変わりはなく、別の方法でこの例を修正するとしたら、整数を使って繰り返しの回数を数えることが確実である。<br />
<br />
<br />
int i; /* 整数型のループインデックス */<br />
float x = 0.1;<br />
for (i = 0; i <br />
<br />
数値解析でも似たような状況が起きることがある。ある結果を求めるために、ある許容値に誤差が収まるまで繰り返す、という手続きを使うことがある。しかし、式に問題があって誤差がその許容値を下回ることが無ければ、結果として<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>になる。<br />
<br />
連結リストのようなデータ構造がループを持っているのに、それに対してナイーブに再帰的な繰返しを行ってしまう、というようなパターンもある。データ構造のループの検出はちょっとした練習問題として知られている。<br />
<br />
#<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>の検出も参照.<br />
<br />
== 複数間でのループ ==<br />
単体のプログラムでの<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>は通常予測しやすいが、複数の要素が相互に影響しあったループは遥かに予測しにくい。ここで、リクエストを理解できない時にはいつもエラー<a href="http://localhost/keyword/%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">メッセージ</a>を返すサーバについて考えてみる。明らかに、そのサーバには<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>の可能性は全く無いが、そのようなサーバが2つ（AとB）あるとする。サーバAがサーバBから受け取った<a href="http://localhost/keyword/%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">メッセージ</a>を理解できなかった時、AはBにエラーを返す。Bが<a href="http://localhost/keyword/%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">メッセージ</a>を理解できなかったらそのエラーをAに返し、そのエラー<a href="http://localhost/keyword/%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">メッセージ</a>をAが理解できなければまた別のエラー<a href="http://localhost/keyword/%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8">メッセージ</a>を返し、これが永遠に繰り返される。このような事態のよくある例がメールループである。<br />
<br />
== 特異な例 ==<br />
=== 不可能な終了条件 ===<br />
C言語での例：<br />
<br />
unsigned int i;<br />
for (i = 1; i &gt; 0; i++)<br />
{ /*loop code*/ }<br />
<br />
これは永遠に動き続けるように見えるが、実際には i の値はいずれ unsigned int に格納できる最大値に達し、その値に 1 を加えることで 0 に巻き戻され、ループから脱出する。実際の i の限界は、使っているシステムやコンパイラの仕様による。多倍長整数では、i をコンピュータのメモリに格納できなくなるまでループが続く。<br />
<br />
=== 無限再帰 ===<br />
無限再帰とは、<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>の特例で、再帰で発生する<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>である。最も些細な例としては、次のSchemeで示したラムダ計算の Ω項である。<br />
<br />
(define Ω<br />
(let ([ω (lambda (f) (f f))])<br />
(ω ω)))<br />
<br />
Ω は無限再帰なので、正規形を持たない。基底ケースが無かったり、帰納段階が不完全な構造的再帰では、普通は無限再帰になってしまう。このような不完全な構造的再帰の例は次の通り。<br />
<br />
(define (sum-from-1-to n)<br />
(+ n (sum-from-1-to (sub1 n))))<br />
<br />
関数 &#39;&#39;sum-from-1-to&#39;&#39; は決して再帰が止まることはなく、スタックを使い尽くすだろう。これを修正するには、基底ケースを追加する。<br />
<br />
(define (sum-from-1-to&#39; n)<br />
(cond<br />
[(= n 1) 1]<br />
[else (+ n (sum-from-1-to&#39; (sub1 n)))]))<br />
<br />
修正した関数は、&#39;&#39;n&#39;&#39; が 1 未満か、&#39;&#39;n&#39;&#39; が大きすぎる時にだけ、スタックを使い尽くすが、最初のケースはエラー<a href="http://localhost/keyword/%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF">チェック</a>すれば回避できる。スタックを使い尽くすことのない再帰関数については、末尾再帰を参照のこと。<br />
<br />
=== オルダーソンループ ===<br />
「オルダーソンループ（Alderson Loop）」とは、ある特別な<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>を表す隠語・俗語で、終了条件は存在するのだが、そのコードの実装ではアクセスできないもの（通常はプログラマのミス）である。ユーザーインターフェイスのデバッグ中にはよく目にする。例えば「1から3を選択するか9で終了する」というメニューなのに9が選択できるようになっていない、といったものであり、一般によくあるタイプのバグである。この言葉はプログラマの名前に由来すると言われており、その人物は Microsoft Access のモーダルダイアログボックスのコードを書いたのだが、そこには OK と Cancel のどちらのボタンも無いために、そのダイアログボックスが表示されると必ずプログラム全体が停止してしまった[http://www.catb.org/~esr/jargon/html/A/Alderson-loop.html Alderson Loop] The Jargon File, Version 4.4.7. Accessed 5/21/2006. (Public Domain) 、ということである。<br />
<br />
=== その他 ===<br />
一見<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>に見えるが、例外や大域ジャンプ（:en:setjmp.h）により抜け出している、というパターンもある。サーバのように、本来無限に処理すべきである場合であればともかく、普通は、例外的ではない通常の処理の流れに例外処理を使うのは良<a href="http://localhost/keyword/%E3%81%8F%E3%81%AA%E3%81%84">くない</a>作法とされる。たとえば、ファイルの終了が返されているにもかかわらず続きを読もうとしたのであれば例外を使うべきだが、単にファイルの終了に到達しただけならばそうすべきでないのが普通である。<br />
<br />
ジャーゴンファイルに収録されている「The Story of Mel」には[http://www.catb.org/jargon/html/story-of-mel.html The Story of Mel] &#34;Perhaps my greatest shock came ～&#34; から後のくだり、どう見ても<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>に見えるが、オーバーフローにより隣のメモリが書き換わることを利用してジャンプ命令を自己書き換えし終了する、という技を見た、という話が紹介されている。<br />
<br />
== <a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>の検出 ==<br />
<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>は、通常、プログラマが原因を突き止めることができると簡単に考える者もいるようだが、次のような例を考えればそうでないことがわかる（簡単のため、数値は無限に大きな値を扱えるものとする）。<br />
<br />
# 入力として、正の整数であるnをとる。<br />
# nが偶数の場合、nを2で割る。<br />
# そうでなければ、nを3倍して、さらに1を加える。<br />
# nが1なら終了する。<br />
# ステップ2に戻る。<br />
<br />
上記はごく簡単なプログラムであるが、たとえば最初のnを27とすると、途中でnは最大9232となる。そして、このプログラムが&#39;どんなnに対しても&#39;終了するか、あるいはあるnで始めると<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>となってしまうかという問題はコラッツの問題と呼ばれ、20<a href="http://localhost/keyword/14%E5%B9%B4">14年</a>時点で未解決の問題である。<br />
<br />
理論上、プログラムが停止するのか動き続けるのかを「どんなプログラムに対しても」「有限の時間内で」「必ず決定できる」ことを全て満たす方法は無い。これは停止問題の決定不能性からの結論である。<br />
<br />
== 日常会話での使用 ==<br />
「<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>」という言葉は他のプログラミング用語（例えばメモリリークやデッドロック等）と同様に非プログラマにも魅力的とされていて、プログラミングエラー以外の状況を表現するのにも使われている。例えば、コンピュータを使う上で一連の手順を求められ、最後には振り出しに戻ってしまうような状況である。特に、目的を達成するか回避するか、その手段がどちらも無いような場合[http://www.pcreview.co.uk/forums/thread-619723.php Caught in an infinite loop （<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>にハマりました）] 日常会話での使用例。 に使われることがある。自発的に何かを繰り返すようにすることを指して使われる[http://bitworking.org/news/Confession_of_an_Infinite_Looper Confession of an infinite looper （無限ルーパーの告白）] ある曲だけを繰り返し聞いている人。 こともある。<br />
<br />
== その他の<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a> ==<br />
楽曲においても、<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>は発生する。楽譜にてダル・セーニョやダ・カーポでジャンプする指示をしながら、曲の終わりを示すフィーネがないと、曲がいつまでたっても終わらなくなる。エリック・サティのピアノ小曲集『スポーツと気晴らし』の第16曲「タンゴ」のように、意図的にしている例も存在するが、これを意図せずやってしまうと<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>となる。<br />
<br />
クラシック曲では普通は無いが、近年のポピュラー音楽等では、進行が終止せず、終止に向けた一定のフレーズを繰り返しながらフェードアウトして終わる、といった曲や、ゲームのBGMのように曲自体は何度でも繰返して終わりがないといった曲もある。<br />
<br />
コンピュータゲームにおいて、特定のルートを通ると、再び同じルートが登場し、先に進めなくなる仕掛けのことを<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>と呼ぶ場合がある。これは特定のルート以外を通れば脱出できるため、厳密な意味での<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>ではない。なお、脱出できる分岐がその先には存在しなくなる一種のトラップが仕掛けてあるゲームもあり、そういったものは本物の<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>である。<br />
<br />
=== 住所 ===<br />
米国カリフォルニア州クパチーノには<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>を表す Infinite Loop という住所が存在する（:en:Infinite Loop (street)）。IT企業であるアップルの本社敷地 Apple Campus 内にある楕円形の道路に「Infinite Loop」の名前が付けられており、この道路を取り囲むように最大5条の同心円状の駐車場が設けられている。<br />
<br />
Infinite Loopの内側にはアップルが保有する6つの建物があり、それぞれ公式に 1 Infinite Loop から 6 Infinite Loop までの住所が与えられている。アップル本社の公式住所は 1 Infinite Loop, Cupertino, California である。<br />
<br />
=== ジョーク ===<br />
<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>をx秒で実行し終えることができる、というスーパーコンピュータの性能をネタにした定番ジョークがある（チャック・ノリス・ファクトのコンピュータ業界版のようなもの）。ジャーゴンファイルの &#34;infinite loop&#34; の項目にある例ではhttp://www.catb.org/jargon/html/I/infinite-loop.html「Cray-3はとても速くて、<a href="http://localhost/keyword/%E7%84%A1%E9%99%90%E3%83%AB%E3%83%BC%E3%83%97">無限ループ</a>を2秒で実行できるくらいだって！」（&#34;The Cray-3 is so fast it can execute an infinite loop in under 2 seconds!&#34;）。<br />
<br />
== 出典 ==<br />
<br />
<br />
== 関連項目 ==<br />
*Goto文<br />
*再帰<br />
*ウロボロス<br />
*いたちごっこ<br />
*停止性問題の決定不能性<br />
*デッドロック<br />
*循環論法<br />
*無限後退<br />
*ミニマル・ミュージック<br />
<br />
<br />
Category:バグ<br />
Category:イディオム (プログラミング言語)<br />
Category:再帰<br />
Category:反復処理<br />
Category:無限<br />
