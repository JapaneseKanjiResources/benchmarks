description<br />
<br />
<br />
&#39;<a href="http://localhost/keyword/Eiffel">Eiffel</a>&#39;（アイフェル、エッフェル）は頑健なソフトウェアの生産に注力したオブジェクト指向プログラミング言語である。<br />
<br />
== 概要 ==<br />
1<a href="http://localhost/keyword/985%E5%B9%B4">985年</a>にバートランド・メイヤー（）によって考案された。その文法はPascalを連想させるものである。<a href="http://localhost/keyword/Eiffel">Eiffel</a>は静的な型指定を強く指向しており、かつ動的なメモリ管理（一般的にガベージコレクションにより実装される）を備えている。<br />
<br />
少し前、オブジェクト指向の教科書的言語といえば、Smalltalkか<a href="http://localhost/keyword/Eiffel">Eiffel</a>か、という状況で、手続き型言語でのPascalのような存在であった。多重継承、ガベージコレクションといった特徴があるが、設計者によってライブラリのメンテナンスが重視されており、契約による設計（&#39;&#39;）の概念が全面に打ち出されている。同じくオブジェクト指向を取り入れた言語であるJavaほどは普及していない。Assertionなど、Javaが追いかけているところもあるが、インタフェースによる継承、GCあり、とかぶるところが多い。<br />
<br />
また、C/C++のようにネイティブコードを直接生成するのではなく、C言語やJavaのコードを生成する、という特徴ももっている。<br />
<br />
言語名の由来は、エッフェル塔ではなく、その設計者ギュスターヴ・エッフェルである。<br />
<br />
== 基本構成 ==<br />
<a href="http://localhost/keyword/Eiffel">Eiffel</a> のソースは以下のように記述する。<br />
<br />
 -- <a href="http://localhost/keyword/%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88">コメント</a><br />
 class クラス名<br />
 <br />
 inherit<br />
   継承元のクラス（継承しない場合は省略可）<br />
 <br />
 creation<br />
  コンストラクタの宣言（コンストラクタが必要ない場合は省略可）<br />
 <br />
 feature{アクセス権限}<br />
   メンバ変数、メンバ関数の記述<br />
 <br />
 end<br />
<br />
<a href="http://localhost/keyword/Eiffel">Eiffel</a> は「クラスとはオブジェクトの生成機である」という考え方が徹底しており、このため両者の概念を混同するようなクラス変数やクラスメソッドの機能は存在しない。このことは「クラスもオブジェクトの一種である」と考える Smalltalk とは対照的である。<br />
<br />
また「クラス」に対する考え方も独特で、例えば Java ではソースファイルをコンパイルすると「クラスファイル」というファイルを作るのを見てわかるように、一般的には「ソースコード」は「クラスの設計図」という概念であるのに対し、<a href="http://localhost/keyword/Eiffel">Eiffel</a> では「クラス」とは「ソースコードそのものである」という考え方である。コンパイルして生成されるファイルは「クラス（ソースコード）によって作られたインスタンス」という考え方であり、このため <a href="http://localhost/keyword/Eiffel">Eiffel</a> ではメイン<a href="http://localhost/keyword/%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3">ルーチン</a>に相当する処理をコンストラクタで行う。<br />
<br />
コンストラクタはcreation下で宣言されたメンバ関数が使用される、このメンバ関数はどんな名称でも構わないが慣例的にmakeとする場合が多い。作成したクラスを使用する場合は<br />
<br />
x :（クラス名）<br />
!!x.（コンストラクタ名）<br />
<br />
でインスタンスを作成する（コンストラクタが指定されているクラスは上記の構文中で必ずコンストラクタを呼び出さなければならない）。<br />
<br />
クラスの継承を省略した場合は ANY というクラスの継承クラスとして扱われる。入出力などのグローバルな機能は ANY クラス内で定義されており、各 <a href="http://localhost/keyword/Eiffel">Eiffel</a> のクラスではこれらの機能の実装に関して考慮をする必要性がないようになっている。<br />
<br />
なお、<a href="http://localhost/keyword/Eiffel">Eiffel</a>はクラス名は全て大文字で書かなければならないという命名規則がある。<br />
<br />
== rename と redefine ==<br />
<a href="http://localhost/keyword/Eiffel">Eiffel</a> の特徴の一つとして、継承における細かい指定が可能ということが挙げられる。例えば<br />
<br />
 class A<br />
 feature<br />
   method1 is<br />
     io.put_string(&#34;Hello from A&#34;)<br />
     io.new_line<br />
   end<br />
 end<br />
<br />
<br />
 class B<br />
 inherit<br />
   A<br />
 feature<br />
   method1 is<br />
     io.put_string(&#34;Hello from B&#34;)<br />
     io.new_line<br />
   end<br />
 end<br />
<br />
というコードがあるとする（ioは標準入出力を扱うインスタンスで、ANYクラスのメンバである）。これは A というクラスを継承した B というクラスに同じ名前のメソッドがある場合である。このとき<br />
<br />
  class  C<br />
  creation<br />
    make<br />
  feature<br />
    a : A<br />
    b : B<br />
 <br />
    make is<br />
    do<br />
      !!b<br />
      a := b<br />
      b.method1<br />
      a.method1<br />
    end<br />
 end<br />
<br />
というコードを実行したとき。b.method1 はおそらく B で定義されたメソッドが動くと誰もが期待するだろうが、a.method1 で実行されるメソッドは A と B どちらで定義されたものだろうか?この場合の処理は言語によって異なっており例えばC++の場合は A で定義されたメソッドが実行され、Javaの場合は B のメソッドが実行される。すなわち言語によって動作が違うため作成者の勘違いなどによって混乱を招くおそれがある。<br />
<br />
<a href="http://localhost/keyword/Eiffel">Eiffel</a>では実のところ、どちらが実行されるか以前に上記のような例ではコンパイルすることができないことになっている。すなわち <a href="http://localhost/keyword/Eiffel">Eiffel</a>のメソッドは全てデフォルトでは継承不可である。しかしこれでは、あまりに制約が強すぎるため、同名のメソッドを定義する必要性があるときは、継承クラスの作成者がどちらを実行するかを指定することが出来る。<br />
<br />
具体的には rename と redefine という機能があり、上記の例では A で定義されたメソッドを実行したい場合は<br />
<br />
 class B<br />
 inherit<br />
   A<br />
   rename<br />
     method1 as method2<br />
   end<br />
<br />
とする。この場合クラス B では A のメソッドを method2 という名前に改名させて、名前の衝突を防いでいる。B のインスタンスでも、クラス A のインスタンスとして扱われた場合（上記の例のような場合）は A の method1 が実行され、クラス B のインスタンスとして扱われた場合は B のmethod1 が実行される。B のインスタンスとして扱われた状態で A の method1 を実行するには上記の例では b.method2 とすればよい。これらの改名による効果は継承先と継承元の他、多重継承時のメソッド同士の衝突にも使用できる。<br />
<br />
逆に A のインスタンスとして扱われる場合でも B の method1 を実行したい場合は以下のようにする。<br />
<br />
 class B<br />
 inherit<br />
   A<br />
   redefine<br />
     method1<br />
   end<br />
<br />
この場合、クラス B はクラス A の method1 を継承時に破棄しクラス B で再定義することを示している。クラス B のインスタンスは A、B どちらで扱われても method1 はクラス B のものが実行され、クラス A の method1 はもはや実行されることは無い。なお再定義を宣言された method1 は必ずクラス B で再定義しなければならず、再定義していない場合はコンパイルエラーとなる。<br />
<br />
このように、<a href="http://localhost/keyword/Eiffel">Eiffel</a> ではクラスの継承時に継承クラスの作成者がメソッドの扱いを自由に設定することができる。<br />
<br />
== コンストラクタの非継承 ==<br />
<a href="http://localhost/keyword/Eiffel">Eiffel</a> の特徴の一つとして多重継承をサポートしていることが挙げられる。<br />
<br />
多重継承時に問題となるものの一つとして、継承した二つの（あるいはそれ以上）のクラスのどちらにもコンストラクタが定義されている場合、二つのクラスのどちらのコンストラクタが実行されるか?というものがある。<a href="http://localhost/keyword/Eiffel">Eiffel</a> の他に多重定義をサポートしている C++や Python では継承元のコンストラクタの実行順に複雑な規則が導入されている。<br />
<br />
<a href="http://localhost/keyword/Eiffel">Eiffel</a>ではコンストラクタは継承されないことになっている。このためコンストラクタの実行手順といったものは原理的に存在しない。どうしても継承元のコンストラクタを使用する必要がある場合は、継承時に rename でコンストラクタとして宣言されているメソッドを改名し、改名したメソッドをコンストラクタ内で実行することで実装できる。<br />
<br />
== 外部リンク ==<br />
<br />
*[http://www.geocities.co.jp/SiliconValley/8632/advanced.html <a href="http://localhost/keyword/Eiffel">Eiffel</a>: 一歩進んだ入門]<br />
*[http://smarteiffel.loria.fr/ Smart<a href="http://localhost/keyword/Eiffel">Eiffel</a> The GNU <a href="http://localhost/keyword/Eiffel">Eiffel</a> Compiler] - Smart<a href="http://localhost/keyword/Eiffel">Eiffel</a> （GNUプロジェクトによるフリーの<a href="http://localhost/keyword/Eiffel">Eiffel</a>コンパイラ）配布ページ<br />
<br />
<br />
Category:オブジェクト指向言語<br />
